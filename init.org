* Introduction
This is my first attempt at [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]].  The goal of this document is to create all the configuration files needed for my Emacs setup.  The setup can be built by invoking the =(org-babel-tangle)= function while visiting this file.

** Following the build
Look under the subheading "Locations and paths" in section "The init file" to make sure that those locations match the files on this computer.

For org mode, you will need to set up which files to show in agenda view by adding =(setf org-agenda-files '(file-1 file-2))= to the file =org-mode-settings.el=.
** Data about this document
#+title: JP's Emacs config file
#+author: J.P. Prin
#+description: My personal emacs configuration
#+startup: overview
* The =init= file
  :PROPERTIES:
  :header-args:emacs-lisp: :tangle init.el
  :END:
** Startup 
*** Report startup time
#+begin_src emacs-lisp
(defun report-startup-time ()
  (interactive)
  (message (format "Startup time was %s" (emacs-init-time))))
#+end_src
** Add the config directory to the load path
Many of the config files go to a directory within =user-emacs-directory= (usually =~/.emacs.d=.  The directory needs to be added to the =load-path= variable..

#+begin_src emacs-lisp
(setf path-to-config-files (concat user-emacs-directory "elisp"))
(add-to-list 'load-path path-to-config-files)
#+end_src

** Packages
#+begin_src emacs-lisp
  (use-package org
    :ensure t
    :bind ("\C-ca" . 'org-agenda))

  (require 'preferences)
  (require 'utilities)
  (require 'org-mode-settings)
#+end_src
** Locations and paths
*** Binaries
Provide Emacs with the location of binaries that it uses in certain shells (like Python or Scheme).

#+begin_src emacs-lisp
(setf inferior-lisp-program "path-to-sbcl"
      scheme-program-name "path-to-guile")
#+end_src
*** Abbrev file location
#+begin_src emacs-lisp
(setf abbrev-file-name "path-to-abbrev-file")
#+end_src
** Autoloads
#+begin_src emacs-lisp 
(autoload 'create-password "passwords" "A library to create strong passwords.")
(autoload 'ledger-mode "ledger-mode" "A major mode for Ledger" t)
#+end_src
** Hooks
#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)
(add-hook 'text-mode-hook 'abbrev-mode)
(add-hook 'after-init-hook 'report-startup-time)
#+end_src
** Make text mode the default major mode
#+begin_src emacs-lisp
(setq-default major-mode 'text-mode)
#+end_src

* Preferences
  :PROPERTIES:
  :header-args:emacs-lisp: :tangle ./elisp/preferences.el :mkdirp yes
  :END:
** Session variables
#+begin_src emacs-lisp 
; Jun 21 2015
(setq-default fill-column 78)
#+end_src
** Autosaves
#+begin_src emacs-lisp
(setq backup-directory-alist
  `(("." . ,(concat user-emacs-directory "backups"))))
#+end_src
** Calc settings
#+begin_src emacs-lisp 
(setf calc-angle-mode 'rad
      calc-group-digits t)
#+end_src
** Calendar settings
*** Calendar location - set to New York City
#+begin_src emacs-lisp 
(setf calendar-latitude 40.7
      calendar-longitude -74.4
      calendar-location-name "New York, NY")
#+end_src
** Appearance
*** Don't show the splash screen on startup
#+begin_src emacs-lisp 
(setq inhibit-splash-screen t)
#+end_src
*** Turn off the tool bar, menu bar, and scroll bar
#+begin_src emacs-lisp 
; Oct 12 2014
(progn
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (toggle-scroll-bar -1)
  )
#+end_src
*** Add the date and time to today's menu
#+begin_src emacs-lisp 
(setq display-time-day-and-date t
      display-time-24hr-format t)
(display-time)
#+end_src
*** Load the modus themes, light mode if we are in daylight hours, dark otherwise
#+begin_src emacs-lisp 
(let ((current-hour (caddr (decode-time (current-time))))
      (day-start-hour 7) ; i.e., 7am
      (day-end-hour 20)) ; i.e., 8pm
  (if (or (< current-hour day-start-hour)
	  (> current-hour day-end-hour))
      (load-theme 'modus-vivendi)  ; use at night
    (load-theme 'modus-operandi))) ; use during the day
#+end_src
** GUI settings

#+begin_src emacs-lisp 
(when (display-graphic-p)
  (setq frame-title-format "cool buffer, bro")
  (set-default 'cursor-type 'hbar))
#+end_src
** Provide the Preferences module
#+begin_src emacs-lisp 
(provide 'preferences)
#+end_src
* Utilities
  :PROPERTIES:
  :header-args:emacs-lisp: :tangle ./elisp/utilities.el :mkdirp yes
  :END:
** Lisp macros
#+begin_src emacs-lisp 
  ; Apr 16 2017
  (defmacro every-p (lst)
    "Takes a function and returns T if every element is true."
    (cons 'and (eval lst)))

  ; Dec 13 2017
  (defmacro mac (expr)
    "A macro shorthand to pretty-print macro expansions"
    `(pp-macroexpand-expression ',expr))

  (defmacro loop (&rest body)
    "Renaming the 'cl-loop' function."
    `(cl-loop ,@body))
#+end_src

** Lisp functions
#+begin_src emacs-lisp
  (defalias 'first 'car "Alias for 'car'")
  (defalias 'second 'cadr "Alias for 'cadr'")
  (defalias 'third 'caddr "Alias for 'caddr'")
  (defalias 'fourth 'cadddr "Alias for 'cadddr'")

  (defun mapcar* (f &rest xs) 
    "MAPCAR for multiple sequences"
    (if (not (memq nil xs))
	(cons (apply f (mapcar 'car xs))
	      (apply 'mapcar* f (mapcar 'cdr xs)))))

  (defun range (start &optional end step) 
    "A range function similar to Python's."
    (unless end
      (setq end start
	    start 0))
    (number-sequence start (1- end) step))
#+end_src

*** Math functions
#+begin_src emacs-lisp 
(defsubst square (x)
  "Return the square of X."
  (* x x))
#+end_src
**** Random variable functions
***** Apply the Knuth shuffle to a list.
This function only works on lists, not other sequences (like strings or arrays).  It does not shuffle the list in place, it returns a new list.

#+begin_src emacs-lisp 
(defun shuffle (lst)
  "Applies the Knuth shuffle to LST and return a new list."
  (cl-loop for i from (length lst) downto 2
	   do (cl-rotatef (elt lst (random i))
			  (elt lst (1- i))))
  lst)
#+end_src
***** Choose a random element from a list.
#+begin_src emacs-lisp 
(defun random-choice (lst)
  "Choose a random element from LST."
  (elt lst (random (length lst))))
#+end_src
**** Statistical functions
#+begin_src emacs-lisp 
(defun mean (lst)
  "Return the arithmetic mean of LST."
  (/ (apply #'+ lst) (float (length lst))))

(defun covar (x y &optional population)
  "Return the covariance of list X and list Y."
  (if (not (= (length x) (length y)))
      (user-error "ERROR: Lists must be the same length")
  (let* ((x-mean (mean x))
	(y-mean (mean y))
	(len (float (length x)))
	(n (if population len (1- len))))
    (/
     (cl-loop for i in x
	      for j in y
	      summing (* (- i x-mean) (- j y-mean)))
     n))))

(defun var (x &optional population)
  "Return the variance of list X."
  (covar x x population))

(defun stdev (x &optional population)
  "Return the standard deviation of list X."
  (sqrt (var x population)))
#+end_src
** File functions
#+begin_src emacs-lisp 
(defun load-data (file) 
  "Return the contents of FILE as a Lisp object."
  (car (read-from-string
	(with-temp-buffer
	  (insert-file-contents file)
	  (buffer-string)))))
#+end_src
** Buffer functions
#+begin_src emacs-lisp 
(defun writing-font () 
  "Preferred frame font for prose writing"
  (interactive)
  (set-frame-font "Calibri 11"))

; Aug 23 2017
(defun insert-date ()
  "Insert a dat in the format MMM DD YYYY."
  (interactive)
  (insert (format-time-string "%b %d %Y" (current-time))))

(defvar *rtf-chars* 
  '(("’" . "'")
    ("‘" . "'")
    ("“" . "\"")
    ("”" . "\"")
    ("–" . "-")
    ("…" . "..."))
  "A list of non-ASCII characters that can't be saved in a text file.")

(defun clean-text ()
  "Replace all the rich text quotes with ASCII quotes"
  (interactive)
  (save-excursion
    (mapc
     #'(lambda (pair) (progn (goto-char (point-min))
			(replace-string (car pair) (cdr pair))))
     *rtf-chars*)))

(defun capitalize-all (start end)
  "Capitalize all of the lower-case characters in the region"
  (interactive (list (region-beginning) (region-end)))
  (if (use-region-p)
      (let* ((old-str (buffer-substring start end))
         (new-str (cl-map 'string (lambda (n) (if (and (>= n 97)
        (<= n 122))
                          (- n 32)
                        n)) old-str)))
    (progn
      (delete-region start end)
      (goto-char start)
      (insert new-str)))))

(defun unfill-region (beg end)
  "Unfill the region, joining text paragraphs into a single logical
line.  Useful when switching between fundamental mode and visual line mode."
  (interactive "*r")
  (let ((fill-column (point-max)))
    (fill-region beg end)))

;; key binding for `unfill-region'
(define-key global-map "\C-\M-Q" 'unfill-region)

(defun regexp-matches (regexp string)
  "Return a list of all regexp matches found in a string"
  (save-match-data
    (let ((pos 0)
	  matches)
      (while (string-match regexp string pos)
	(push (match-string 0 string) matches)
	(setq pos (match-end 0)))
      matches)))

(defun number-grouping (number &optional separator)
  "Add commas to NUMBER and return it as a string.
    Optional SEPARATOR is the string to use to separate groups.
    It defaults to a comma."
  (let ((num (number-to-string number))
	(op (or separator ",")))
    (while (string-match "\\(.*[0-9]\\)\\([0-9][0-9][0-9].*\\)" num)
      (setq num (concat 
		 (match-string 1 num) op
		 (match-string 2 num))))
    num))

(defun insert-comment-header (header)
  "Insert HEADER surrounded by asterisks as the header for a section of code."
  (interactive "sEnter the section header: ")
  (let* ((comment-line-length 64)     ; nice looking number
	 (spaces (make-string 2 32))  ; two spaces on each side

	 ; capitalize the text
	 (upcase-header (upcase header))
	 
	 ; make space for header string and two spaces on each side
	 (header-length (+ (length header) (* 2 (length spaces))))
	 
  	 ; get enough stars to fill it out to 75 spaces
	 (stars (make-string (/ (- comment-line-length header-length) 2) ?*))

	 ; insert a semi-colon to start
	 (comment-start (make-string 1 59))
	 
	 ; put them all together
	 (comment-string  (concat comment-start stars spaces upcase-header spaces stars)))

    (insert comment-string)))

(defun re-seq (regexp string)
  "Get a list of all regexp matches in a string"
  (save-match-data
    (let ((pos 0)
	  matches)
      (while (string-match regexp string pos)
	(push (match-string 0 string) matches)
	(setq pos (match-end 0)))
      matches)))
#+end_src
** Browser functions
#+begin_src emacs-lisp 
(defun google () 
  "Opens a brower and sends a Google search request."
  (interactive)
  (browse-url
   (concat
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q="
    (if mark-active
	(buffer-substring (region-beginning) (region-end))
      (read-string "Google: ")))))
#+end_src
** Provide
#+begin_src emacs-lisp 
(provide 'utilities)
#+end_src
* Org mode settings
  :PROPERTIES:
  :header-args:emacs-lisp: :tangle ./elisp/org-mode-settings.el :mkdirp yes
  :END:
Most of the code in this section is taken from [[https://howardism.org/Technical/Emacs/orgmode-wordprocessor.html][this web page]].
** Hide the emphasis markers that decorate formatted text
#+begin_src emacs-lisp 
(setf org-hide-emphasis-markers t)
#+end_src
** Replace dashes and plus (+) signs with actual bullets
#+begin_src emacs-lisp 
(font-lock-add-keywords
 'org-mode '(("^ +\\([-*]\\) "
	      (0 (prog1 () (compose-region
			    (match-beginning 1) (match-end 1) "•"))))))
#+end_src
** Add a shortcut for the function that converts an Org region to a table
#+begin_src emacs-lisp 
(defalias 'region-to-table 'org-table-create-or-convert-from-region
  "Shortcut since I can never remember the full name of this function.")
#+end_src
** Provide org mode settings
#+begin_src emacs-lisp 
(provide 'org-mode-settings)
#+end_src
* Passwords
  :PROPERTIES:
  :header-args:emacs-lisp: :tangle ./elisp/passwords.el :mkdirp yes
  :END:
** Pretty much obselete
#+begin_src emacs-lisp 
(defun create-password ()
  (interactive)
  (insert (format "%s" (make-password 16))))

(defun* make-password (length &optional (upper t) (lower t) (number t) (symbol nil) (ambiguous nil))
  "Return a string of LENGTH random characters.  If UPPER is non-nil,
use uppercase letters.  If lower is non-nil, use lowercase letters.
If NUMBER is non-nil, use numbers.  If SYMBOL is non-nil, use one of
\"!\"#$%&'()*+'-./:;<=>?@`{}|~\".  If AMBIGUOUS is nil, avoid
characters like \"l\" and \"1\", \"O\" and \"0\"."
  (interactive (make-password-prompt-for-args))
  (let ((char-list (make-password-char-list upper lower number symbol ambiguous))
	 position password)
    (random t)
  (loop for i from 1 to length 
	do (setq position (random (length char-list))
		 password (concat password (string (nth position char-list)))))
  (if (interactive-p)
      (let* ((strength (make-password-strength length upper lower number symbol ambiguous))
	     (bits (car strength))
	     (number (cadr strength)))
	(message "The password \"%s\" is one of 10^%d possible and has a bit equivalence of %d" 
		 password (round number) (round bits)))
    password)))

(defun make-password-char-list (upper lower number symbol ambiguous)
  (let* ((upper-chars-ambiguous '(?I ?O ?G))
	 (upper-chars (loop for i from ?A to ?Z unless 
			    (member i upper-chars-ambiguous)
			    collect i))
	 (lower-chars-ambiguous '(?l ?o))
	 (lower-chars (loop for i from ?a to ?z unless 
			    (member i lower-chars-ambiguous)
			    collect i))
	 (number-chars-ambiguous '(?0 ?1 ?6))
	 (number-chars (loop for i from ?0 to ?9 unless
			     (member i number-chars-ambiguous)
			     collect i))
	 (symbol-chars '(?! ?@ ?# ?$ ?% ?& ?* ?( ?) ?+ ?= ?/ 
			    ?{ ?} ?[ ?] ?: ?\; ?< ?>))
	 (symbol-chars-ambiguous '(?_ ?- ?| ?, ?. ?` ?' ?~ ?^ ?\"))
	 char-list)
  (if upper
      (setq char-list (append char-list upper-chars)))
  (if lower
      (setq char-list (append char-list lower-chars)))
  (if number
      (setq char-list (append char-list number-chars)))
  (if symbol
      (setq char-list (append char-list symbol-chars)))
  (if ambiguous
      (setq char-list (append char-list
			      upper-chars-ambiguous 
			      lower-chars-ambiguous
			      number-chars-ambiguous
			      symbol-chars-ambiguous)))
  char-list))

(defun make-password-prompt-for-args ()
  (interactive)
  (list
   (string-to-number (read-from-minibuffer "Number of Characters: "))
   (y-or-n-p "User uppercase: ")
   (y-or-n-p "User lowercase: ")
   (y-or-n-p "User numbers: ")
   (y-or-n-p "User symbols: ")
   (y-or-n-p "User ambiguous characters: ")))

(defun* make-password-strength (length &optional (upper t) (lower t) (number t) (symbol nil) (ambiguous nil))
  "Calculate the number of possible passwords that could be generated
given the criteria of LENGTH and use of UPPER, LOWER, NUMBER, SYMBOL,
and AMBIGUOUS characters"
  (interactive (make-password-prompt-for-args))
  (let* ((char-list (make-password-char-list upper lower number symbol ambiguous))
	 (bits (/ (* length (log (length char-list))) (log 2)))
	 (number (/ (* bits (log 2)) (log 10))))
    (if (interactive-p)
	(message "number of combinations is 10^%d with a bit equivalence of %d" (round number) (round bits))
      (list bits number))))

(provide 'passwords)
#+end_src
* Spell check
* Minor modes
* Abbrevs
* Key bindings
  :PROPERTIES:
  :header-args:emacs-lisp: :tangle ./elisp/keybindings.el :mkdirp yes
  :END:
#+begin_src emacs-lisp 
(global-set-key (kbd "C-c C-d") 'insert-date)
(define-key global-map "\C-\M-Q" 'unfill-region)
#+end_src

* Oblivion
  :PROPERTIES:
  :header-args:emacs-lisp: :tangle ./elisp/oblivion.el :mkdirp yes
  :END:

#+begin_src emacs-lisp 
; (global-linum-mode t)

(deftheme Oblivion
  "Created 2012-10-19.")

;; (defvar butter1 "#fce94f")
;; (defvar butter2 "#edd400")
;; (defvar butter3 "#c4a000")
;; (defvar chameleon1 "#8ae234")
;; (defvar chameleon2 "#73d216")
;; (defvar chameleon3 "#4e9a06")
;; (defvar orange1 "#fcaf3e")
;; (defvar orange2 "#f57900")
;; (defvar orange3 "#ce5c00")
;; (defvar skyblue1 "#729fcf")
;; (defvar skyblue2 "#3465a4")
;; (defvar skyblue3 "#204a87")
;; (defvar plum1 "#ad7fa8")
;; (defvar plum2 "#75507b")
;; (defvar plum3 "#5c3566")
;; (defvar chocolate1 "#e9b96e")
;; (defvar chocolate2 "#c17d11")
;; (defvar chocolate3 "#8f5902")
;; (defvar scarletred1 "#ef2929")
;; (defvar scarletred2 "#cc0000")
;; (defvar scarletred3 "#a40000")
;; (defvar aluminium1 "#eeeeec")
;; (defvar aluminium2 "#d3d7cf")
;; (defvar aluminium3 "#babdb6")
;; (defvar aluminium4 "#888a85")
;; (defvar aluminium5 "#555753")
;; (defvar aluminium6 "#2e3436")


(custom-theme-set-faces
 'Oblivion

 '(strong-face ((t (:weight bold))))
 '(warning-face ((t (:foreground "#ce5c00" :weight bold :underline t))))
 '(error-face ((t (:foreground "#a40000" :weight bold :underline t))))

     ;;; basic coloring
 '(default ((t (:foreground "#d3d7cf" :background "#2e3436"))))
 '(cursor
  ((t (:backgrund "#d3d7cf"))))
 '(escape-glyph-face ((t (:foreground "#edd400"))))
 '(fringe ((t (:foreground "#d3d7cf" :background "#2e3436"))))
 '(header-line ((t (:foreground "#d3d7cf" :background "#555753"))))
 '(highlight ((t (:background "#555753"))))

 ;; faces used by isearch
 '(isearch ((t (:foreground "#2e3436" :background "#eeeeec"))))
 '(isearch-fail ((t (:foreground "#d3d7cf" :background "#a40000"))))
 '(lazy-highlight ((t (:foreground "black" :background "#fce94f"))))

 '(menu ((t (:foreground "#d3d7cf" :background "#2e3436"))))
 '(minibuffer-prompt ((t (:foreground "#729fcf"))))
 '(mode-line ((t (:foreground "#2e3436" :background "#eeeeec"))))
 '(mode-line-buffer-id ((t (:inherit strong-face))))
 '(mode-line-inactive ((t (:foreground "#d3d7cf" :background "#555753"))))
 '(region ((t (:foreground "#eeeeec" :background "#888a85"))))
 '(secondary-selection ((t (:foreground "#eeeeec" :background "#729fcf"))))
 '(trailing-whitespace ((t (:background "#edd400"))))
 '(vertical-border ((t (:foreground "#d3d7cf"))))

     ;;; font lock
 '(font-lock-builtin-face ((t (:foreground "#729fcf"))))
 '(font-lock-comment-face ((t (:foreground "#888a85"))))
 '(font-lock-comment-delimiter-face ((t (:foreground "#888a85"))))
 '(font-lock-constant-face ((t (:foreground "#ef2929"))))
 '(font-lock-doc-face ((t (:foreground "#888a85" :slant italic))))
 '(font-lock-doc-string-face ((t (:foreground "#729fcf"))))
 '(font-lock-function-name-face ((t (:foreground "#729fcf"))))
 '(font-lock-keyword-face ((t (:foreground "#eeeeec" :weight bold))))
 '(font-lock-negation-char-face ((t (:foreground "#8ae234"))))
 '(font-lock-preprocessor-face ((t (:foreground "#ad7fa8"))))
 '(font-lock-string-face ((t (:foreground "#edd400"))))
 '(font-lock-type-face ((t (:foreground "#8ae234"))))
 '(font-lock-variable-name-face ((t (:foreground "#8ae234" :weight bold))))
 '(font-lock-warning-face ((t (:inherit warning-face))))

 '(c-annotation-face ((t (:inherit font-lock-constant-face))))

 ;; auto-complete
 '(ac-candidate-face ((t (:background "#eeeeec" :foreground "black"))))
 '(ac-selection-face ((t (:background "#3465a4" :foreground "#eeeeec"))))
 '(popup-tip-face ((t (:background "#fce94f" :foreground "black"))))
 '(popup-scroll-bar-foreground-face ((t (:background "#729fcf"))))
 '(popup-scroll-bar-background-face ((t (:background "#555753"))))
 '(popup-isearch-match ((t (:background "#2e3436" :foreground "#d3d7cf"))))

 ;; diff
 '(diff-added ((t (:foreground "#8ae234"))))
 '(diff-changed ((t (:foreground "#fce94f"))))
 '(diff-removed ((t (:foreground "#ef2929"))))
 '(diff-header ((t (:background "#555753"))))
 '(diff-file-header
  ((t (:background "#204a87" :foreground "#eeeeec" :bold t))))

 ;; eshell
 '(eshell-prompt ((t (:inherit strong-face))))
 '(eshell-ls-archive ((t (:foreground "#ef2929" :weight bold))))
 '(eshell-ls-backup ((t (:inherit font-lock-comment))))
 '(eshell-ls-clutter ((t (:inherit font-lock-comment))))
 '(eshell-ls-directory ((t (:foreground "#729fcf" :weight bold))))
 '(eshell-ls-executable ((t (:foreground "#73d216" :weight bold))))
 '(eshell-ls-unreadable ((t (:foreground "#d3d7cf"))))
 '(eshell-ls-missing ((t (:inherit font-lock-warning))))
 '(eshell-ls-product ((t (:inherit font-lock-doc))))
 '(eshell-ls-special ((t (:inherit strong-face))))
 '(eshell-ls-symlink ((t (:foreground "#ad7fa8" :weight bold))))

 ;; flymake
 '(flymake-errline ((t (:inherit error-face))))
 '(flymake-warnline ((t (:inherit warning-face))))

 ;; flyspell
 '(flyspell-duplicate ((t (:inherit warning-face))))
 '(flyspell-incorrect ((t (:inherit error-face))))

 ;; hl-line-mode
 '(hl-line-face ((t (:background "#555753"))))

 ;; ido-mode
 '(ido-first-match ((t (:inherit strong-face))))
 '(ido-only-match ((t (:inherit strong-face))))
 '(ido-subdir ((t (:foreground "#babdb6"))))

 ;; js2-mode
 '(js2-warning-face ((t (:underline "#fcaf3e"))))
 '(js2-error-face ((t (:inherit error-face))))
 '(js2-jsdoc-tag-face ((t (:foreground "#8ae234"))))
 '(js2-jsdoc-type-face ((t (:foreground "#f57900"))))
 '(js2-jsdoc-value-face ((t (:foreground "#eeeeec" :weight bold))))
 '(js2-function-param-face ((t (:foreground "#fcaf3e" :slant italic))))
 '(js2-jsdoc-html-tag-name-face ((t (:foreground "#729fcf"))))
 '(js2-jsdoc-html-tag-delimiter-face ((t (:foreground "#729fcf"))))
 '(js2-external-variable-face ((t (:foreground "#f57900"))))

 ;; linum-mode
 '(linum ((t (:foreground "#555753" :background "#000000"))))

 ;; magit
 '(magit-section-title ((t (:inherit strong-face))))
 '(magit-branch ((t (:inherit strong-face))))

 ;; nxhtml
 '(nxml-tag-delimiter ((t (:foreground "#729fcf"))))
 '(nxml-tag-delimiter-face ((t (:foreground "#729fcf"))))

 ;; css-mode
 '(css-property ((t (:inherit bold :foreground "#ffffff"))))
 '(css-selector ((t (:foreground "#d3d7cf"))))

 ;; mumamo
 '(mumamo-background-chunk-major ((t (:background "#2e3436"))))
 '(mumamo-background-chunk-submode1 ((t (:background "#2e3436"))))
 '(mumamo-background-chunk-submode2 ((t (:background "#2e3436"))))
 '(mumamo-background-chunk-submode3 ((t (:background "#2e3436"))))
 '(mumamo-background-chunk-submode4 ((t (:background "#2e3436"))))
 '(mumamo-background-chunk-submode5 ((t (:background "#2e3436"))))

 ;; outline
 '(outline-8 ((t (:inherit default))))
 '(outline-7 ((t (:inherit outline-8 :height 1.0))))
 '(outline-6 ((t (:inherit outline-7 :height 1.0))))
 '(outline-5 ((t (:inherit outline-6 :height 1.0))))
 '(outline-4 ((t (:inherit outline-5 :height 1.0))))
 '(outline-3 ((t (:inherit outline-4 :height 1.0))))
 '(outline-2 ((t (:inherit outline-3 :height 1.0))))
 '(outline-1 ((t (:inherit outline-2 :height 1.0))))

 ;; show-paren
 '(show-paren-mismatch
   ((t (:foreground "#eeeeec" :weight bold :background "#babdb6"))))
 '(show-paren-match
   ((t (:foreground "#eeeeec" :weight bold :background "#babdb6")))))

(provide-theme 'Oblivion)
;; end of Oblivion template
#+end_src

  

